---
#----------------------------------------------------------------------------------------------------------------------
# ROOT
# Below are the root keys of the expected YAML config file.
#----------------------------------------------------------------------------------------------------------------------
general: include('general', required=False)
management: include('management', required=False)
logs: include('logs', required=False)
network: include('network', required=False)
storage: include('storage', required=False)
security: include('security', required=False)
analytics_services: include('analytics_services', required=False)
packages: include('packages', required=False)
automation: include('automation', required=False)
---
#----------------------------------------------------------------------------------------------------------------------
# GENERAL
#----------------------------------------------------------------------------------------------------------------------
general:
  prefix: str(max=3)
  unique_id: str(max=4)
  use_legacy_naming: bool()
  region: str()
  tags: map()

#----------------------------------------------------------------------------------------------------------------------
# MANAGEMENT
#----------------------------------------------------------------------------------------------------------------------
management:
  user_groups: map(include('user_group'),key=str())
  resource_groups: map(include('resource_group'),key=str())
  resource_providers: list(str(),null(), required=False)

# management.user_groups
user_group:
  display_name: str()
  object_id: str(required=False)

# management.resource_groups
resource_group:
  display_name: str()
  iam: include('_iam', required=False)

#----------------------------------------------------------------------------------------------------------------------
# LOGS
#----------------------------------------------------------------------------------------------------------------------
logs:
  retention: int()
  resource_types: map(bool(), key=str())

#----------------------------------------------------------------------------------------------------------------------
# NETWORK
#----------------------------------------------------------------------------------------------------------------------
network:
  firewall: include('_network_firewall')
  nat_gateway:
    enabled: bool()
    public_ip: include('_logs_and_metrics', required=False)
  virtual_network: include('_network_virtual_network')

# network.firewall
_network_firewall:
  enabled: bool()
  ip_access_list: list(ip(), required=False)

# network.virtual_networks
_network_virtual_network:
  display_name: str()
  address_space: str()

#----------------------------------------------------------------------------------------------------------------------
# STORAGE
#----------------------------------------------------------------------------------------------------------------------
storage:
  datalake:
    display_name: str(max=9)
    containers: map(include('storage_datalake_container'), key=str())
    tables: map(include('storage_datalake_table'), key=str())
    network:
      firewall:
        enabled: bool()
      private_endpoint: include('storage_datalake_network_private_endpoint', required=False)
    iam: include('_iam', required=False)
    logs: include('_logs', required=False)
    metrics: include('_metrics', required=False)
    storage_type_logging: include('storage_datalake_storage_type_logging', required=False)

# storage.datalake.containers
storage_datalake_container:
  display_name: str()
  iam: include('_iam', required=False)

# storage.datalake.table
storage_datalake_table:
  display_name: str()
  iam: include('_iam', required=False)
  entities: map(include('storage_datalake_table_entity'), key=str(), required=False)

storage_datalake_table_entity:
  partition_key: str()
  row_key: str()
  entity: map(required=False)

# storage.datalake.network.private_endpoint
storage_datalake_network_private_endpoint:
  blob: include('_logs_and_metrics', required=False)
  dfs: include('_logs_and_metrics', required=False)

# storage.datalake.storage_type_logging
storage_datalake_storage_type_logging:
  blob: include('_logs_and_metrics', required=False)
  table: include('_logs_and_metrics', required=False)

#----------------------------------------------------------------------------------------------------------------------
# SECURITY
#----------------------------------------------------------------------------------------------------------------------
security:
  config_registry: include('_config_registry', required=False)
  credentials_store: include('_credentials_store', required=False)

_config_registry:
  network:
    firewall:
      enabled: bool()
    private_endpoint: include('_logs_and_metrics', required=False)
  iam: include('_iam', required=False)
  logs: include('_logs', required=False)
  metrics: include('_metrics', required=False)

_credentials_store:
  network:
    firewall:
      enabled: bool()
    private_endpoint: include('_logs_and_metrics', required=False)
  iam: include('_iam', required=False)
  logs: include('_logs', required=False)
  metrics: include('_metrics', required=False)

#----------------------------------------------------------------------------------------------------------------------
# ANALYTICS SERVICES
#----------------------------------------------------------------------------------------------------------------------
analytics_services:
  databricks: include('_databricks')
  datafactory: include('_datafactory')
  dbt: include('_dbt', required=False)

_databricks:
  workspaces: map(include('_databricks_workspace'),key=str())

_databricks_workspace:
  config: include('_databricks_workspace_config', required=False)
  iam: include('_iam', required=False)
  storage_mounts: list(include('_databricks_storage_mount'), required=False)
  clusters: map(include('_databricks_single_node_cluster'),include('_databricks_high_concurrency_cluster'),key=str(), required=False)
  logs: include('_logs', required=False)
  metrics: include('_metrics', required=False)
  network_security_groups: include('_logs_and_metrics', required=False)

_databricks_workspace_config:
  enable_container_services: str(required=False)
  enable_ip_access_lists: str(required=False)

_databricks_storage_mount:
  type: str()
  mount_name: str()
  container_name: str(required=False)

_databricks_single_node_cluster:
  type: regex('.*^single_node$')
  display_name: str()
  spark_version: str()
  node_type_id: str()
  is_pinned: bool(required=False)
  autotermination_minutes: int(min=10)
  docker_image_url: str(required=False)
  spark_env_vars: map(required=False)
  spark_conf: map(required=False)
  libraries: include('_databricks_cluster_libraries', required=False)

_databricks_high_concurrency_cluster:
  type: regex('.*^high_concurrency$')
  display_name: str()
  spark_version: str()
  node_type_id: str()
  is_pinned: bool(required=False)
  auto_scale_min_workers: int(min=1)
  auto_scale_max_workers: int(min=2)
  use_spot_instances: bool(required=False)
  autotermination_minutes: int(min=10)
  docker_image_url: str(required=False)
  spark_env_vars: map(required=False)
  spark_conf: map(required=False)
  libraries: include('_databricks_cluster_libraries', required=False)

_databricks_cluster_libraries:
  pypi: list(include('_databricks_cluster_library_pypi'), required=False)
  whl: list(str(), required=False)

_databricks_cluster_library_pypi:
  package: str()
  repo: str(required=False)

_datafactory:
  factories: map(include('_datafactory_factory'),key=str())

_datafactory_factory:
  display_name: str()
  iam: include('_iam', required=False)
  integration_runtimes: list(include('_datafactory_integration_runtime'), required=False)
  logs: include('_logs', required=False)
  metrics: include('_metrics', required=False)

_datafactory_integration_runtime:
  type: enum("self-hosted","self-hosted-azure-vnet-integrated")
  name: str()
  description: str(required=False)

_dbt:
  documentation: include('_dbt_documentation', required=False)

_dbt_documentation:
  enabled: bool()
  custom_domains: list(include('_dbt_documentation_custom_domain'), required=False)
  location: str(required=False)
  sku_name: str(required=False)
  sku_tier: str(required=False)

_dbt_documentation_custom_domain:
  domain: str()
  validation: enum("cname-delegation", "dns-txt-token", required=False)

#----------------------------------------------------------------------------------------------------------------------
# PACKAGES
#----------------------------------------------------------------------------------------------------------------------
packages: list(include('_package'), required=False)

_package:
  name: str()
  git: str(required=False)
  pypi: str(required=False)
  local: str(required=False)
  config: map(required=False)

#----------------------------------------------------------------------------------------------------------------------
# AUTOMATION
#----------------------------------------------------------------------------------------------------------------------
# TODO: Populate the automation schema
automation: any()

#----------------------------------------------------------------------------------------------------------------------
# COMMON
# These are common definitions that are reused across the schema.
#----------------------------------------------------------------------------------------------------------------------
_iam:
  role_assignments: list(include('_iam_role_assignment'))

_iam_role_assignment:
  role_definition_name: str()
  object_id: str(required=False)
  user_group_ref_key: str(required=False)
  azure_devops_project_group_name: str(required=False)

_logs:
  enabled: bool(required=False)
  categories: list(str(), required=False)

_metrics:
  enabled: bool(required=False)
  categories: list(str(), required=False)

_logs_and_metrics:
  logs: include('_logs', required=False)
  metrics: include('_metrics', required=False)
